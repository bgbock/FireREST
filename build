#! /bin/bash

VERSION_MAJOR=0
VERSION_MINOR=11
VERSION_PATCH=0

echo "NAME	: ../FireREST/build -- compile FireREST"
echo "ETA	: 1-30 minutes"
echo "HELP	: https://github.com/firepick1/FireREST/wiki/Build-FireREST"
echo "DATE	: `date`"
echo "VERSION	: $VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
echo "PATH	: $PATH"
echo "SHELL	: $SHELL"

function pull_git() {
  echo "GIT	: UPDATING $1"
  if [ ! -e $1 ]; then
    sudo -E -u $SUDO_USER git clone git://github.com/firepick1/$1
  fi
  pushd $1 &> /dev/null
  sudo -E -u $SUDO_USER git pull
  popd &> /dev/null
}
function build_git() {
  echo "STATUS	: BUILDING $1"
  pushd $1 &> /dev/null
  ./build
  if [ $? -ne 0 ]; then
    echo "ERROR	: $1 INSTALLATION FAILED"
    exit -1
  fi
  popd &> /dev/null
}

if [ "$FIREREST_CONFIG" == "" ]; then FIREREST_CONFIG=examples/cfg-firepick1.json; fi

echo "GRUNT	: generating FireREST configuration files (see examples)"
sudo -E -u $SUDO_USER grunt cfg-version:config/FireREST.json:examples/cfg-firepick1.json:$VERSION_MAJOR:$VERSION_MINOR:$VERSION_PATCH \
  cfg-custom:examples/cfg-firepick1.json:config/cv.json:config/cnc-firepick1.json 
sudo -E -u $SUDO_USER grunt cfg-version:config/FireREST.json:examples/cfg-firepick-delta.json:$VERSION_MAJOR:$VERSION_MINOR:$VERSION_PATCH \
  cfg-custom:examples/cfg-firepick-delta.json:config/cv.json:config/cnc-firepick-delta.json 

cp $FIREREST_CONFIG www/config.json

echo "CONFIG	: $FIREREST_CONFIG"
echo "SUDO	: SUDO_USER: $SUDO_USER"
echo "SSH	: SSH_AGENT_PID: $SSH_AGENT_PID"

fire/web -k

if [ "$SUDO_USER" == "" ]; then
  echo "ERROR	: SUDO_USER is not defined"
  echo "TRY	: You must run this script as superuser:"
  echo 'TRY	:   sudo ./build'
  exit -1
fi

pull_git FireSight
pull_git FireFUSE

ps -eo uid,args | grep -E firerest.js | grep node > /dev/null
if [ $? -eq 0 ]; then
  echo "----------------------------------------"
  echo "ERROR	: FireREST is already running"
  echo "TRY	: Kill the existing FireREST process before proceeding with the build:"
  echo "PID	: `ps -e -o pid,command | grep -E "firerest.js" | grep -v grep`"
  exit -1
fi

if [ "$(type -p grunt)" == "" ]; then
  echo "INSTALL	: grunt"
  npm install -g grunt-cli
  if [ $? -ne 0 ]; then echo "ERROR	: installation failred"; exit -1; fi
fi

if [ "$(type -p lsb_release)" == "" ]; then
  echo "INSTALL	: lsb_release"
  apt-get install -y lsb-release
  if [ $? -ne 0 ]; then echo "ERROR	: installation failred"; exit -1; fi
fi
if [ "$(arch)" != "armv6l" ] || [ "$(lsb_release -is)" != "Debian" ] ;then
  RASPBIAN=0
else
  RASPBIAN=1
fi

if [ "$(type -p siege)" == "" ]; then
  echo "INSTALL	: siege"
  apt-get install -y siege
  if [ $? -ne 0 ]; then echo "ERROR	: installation failred"; exit -1; fi
else 
  echo "STATUS	: siege installed"
fi

if [ "$(type -p node)" == "" ]; then
  echo "INSTALL	: NodeJS"
  if [ $RASPBIAN -eq 1 ]; then
    mkdir /opt/node
    pushd /opt/node
    wget http://nodejs.org/dist/v0.10.22/node-v0.10.22-linux-arm-pi.tar.gz
    tar xvzf node-*-linux-arm-pi.tar.gz
    rm node-*-linux-arm-pi.tar.gz
    cd /usr/local/bin
    ln -s /opt/node/node-*pi/bin/node node
    ln -s /opt/node/node-*pi/bin/npm npm
    popd
  else
   echo "ERROR	: automatic installation of NodeJS failed"
   echo "TRY	: install NodeJS manually"
   exit -1
  fi
else
  echo "STATUS	: NodeJS installed"
fi
if [ ! -e node_modules ]; then
  echo "INSTALL	: NodeJS dependencies" 
  npm install
  if [ $? -ne 0 ]; then echo "ERROR	: installation failred"; exit -1; fi
else
  echo "STATUS	: node_modules installed"
fi

if [ $RASPBIAN -ne 1 ]; then
  echo "CONTENT	: FireREST reference implementation. Static content only"
  echo "SUCCESS	: Build complete"
else 
  echo "CONTENT	: Raspberry Pi FireFUSE with live content"
  if [ -e version-$VERSION_MAJOR.$VERSION_MINOR ] && [ -e /dev/firefuse/status ] ; then
    echo "STATUS	: FireREST dependencies OK"
  else
    build_git FireSight
    build_git FireFUSE
  fi
fi

date > version-$VERSION_MAJOR.$VERSION_MINOR

echo "------------------------------------------"
echo "DATE	: `date`"
echo "SUCCESS	: ../FireREST/build complete"
echo "TEST	: Launch FireREST web service:"
echo "TEST	;   fire/web -s"
echo "TEST	; Verify FireREST web service at http://localhost:8080"
