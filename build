#! /bin/bash

VERSION_MAJOR=0
VERSION_MINOR=13
VERSION_PATCH=0

echo
echo "COMMAND	: build $@ # build FireREST and its components"
echo "ETA	: 1-30 minutes"
echo "HELP	: https://github.com/firepick1/FireREST/wiki/Build-FireREST"
echo "DATE	: `date`"
echo "VERSION	: $VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
echo "PATH	: $PATH"
echo "SHELL	: $SHELL"

if [ "$SUDO_USER" != "" ]; then
  echo "ERROR	: This script will call sudo as required and must be run by non-root user"
  echo "TRY	:   ./build"
  exit -1
fi
echo "SUDO	: requesting sudo installation permission"
sudo echo "SUDO	: confirmed"
if [ $? -ne 0 ]; then echo "ERROR	: cannot build"; exit -1; fi

function pull_git() {
  echo "GIT	: UPDATING $1"
  if [ ! -e $1 ]; then
    git clone git://github.com/firepick1/$1
  fi
  pushd $1 &> /dev/null
  git pull
  popd &> /dev/null
}
function build_git() {
  echo "STATUS	: BUILDING $1"
  pushd $1 &> /dev/null
  . ./build
  if [ $? -ne 0 ]; then
    echo "ERROR	: $1 INSTALLATION FAILED"
    exit -1
  fi
  popd &> /dev/null
}

if [ "$FIREREST_CONFIG" == "" ]; then FIREREST_CONFIG=examples/cfg-firepick-delta.json; fi

if [ "$(type -p bc)" == "" ]; then
  echo "INSTALL : bc"
  sudo apt-key update;
  sudo apt-get update;
  sudo apt-get install bc;
  if [ $? -ne 0 ]; then echo "ERROR	: installation failed"; exit -1; fi
fi
echo "STATUS	: bc installed"

if [ "$(type -p tmux)" == "" ]; then
  echo "INSTALL	: tmux"
  sudo apt-get install tmux
  if [ $? -ne 0 ]; then echo "ERROR	: installation failed"; exit -1; fi
fi
echo "STATUS	: tmux installed"

if [ "$(type -p lsb_release)" == "" ]; then
  echo "INSTALL	: lsb_release"
  sudo apt-get install -y lsb-release
  if [ $? -ne 0 ]; then echo "ERROR	: installation failed"; exit -1; fi
fi
if [ "$(arch)" != "armv6l" ] || [ "$(lsb_release -is)" != "Debian" ] ;then
  RASPBIAN=0
  echo "SYSTEM	: other (FireFUSE not supported)"
else
  RASPBIAN=1
  echo "SYSTEM	: Raspberry Pi with Rasbian"
fi

if [ "$(type -p node)" == "" ]; then
  echo "INSTALL	: NodeJS"
  if [ $RASPBIAN -eq 1 ]; then
    mkdir /opt/node
    pushd /opt/node > /dev/null
    NODE_DISTRO=http://nodejs.org/dist/v0.10.22/node-v0.10.22-linux-arm-pi.tar.gz
    echo "COMMAND	: sudo wget $NODE_DISTRO"
    sudo wget $NODE_DISTRO
    sudo tar xvzf node-*-linux-arm-pi.tar.gz
    sudo rm node-*-linux-arm-pi.tar.gz
    sudo cd /usr/local/bin
    sudo ln -s /opt/node/node-*pi/bin/node node
    sudo ln -s /opt/node/node-*pi/bin/npm npm
    popd > /dev/null
  else
    echo "COMMAND	: sudo apt-get install -y nodejs nodejs-legacy"
    sudo apt-get install -y nodejs nodejs-legacy 
    RC=$?; if [ $RC -ne 0 ]; then 
      echo "ERROR	: $RC"; 
      echo "TRY	: install NodeJS manually"

      exit -1
    fi
  fi
fi
echo "STATUS	: NodeJS installed"

if [ "$(type -p npm)" == "" ]; then
  echo "COMMAND	: sudo apt-get install -y npm"
  sudo apt-get install -y npm; 
  RC=$?; if [ $RC -ne 0 ]; then 
      echo "ERROR	: $RC"; 
      echo "TRY	: install npm manually"
      exit -1
  fi
fi
echo "STATUS	: npm installed"

if [ "$(type -p grunt)" == "" ]; then
  echo "INSTALL	: sudo npm install -g grunt-cli"
  sudo npm install -g grunt-cli
  if [ $? -ne 0 ]; then echo "ERROR	: installation failed"; exit -1; fi
  echo "INSTALL	: npm install grunt@0.4.5"
  npm install grunt@0.4.5 --save-dev
  if [ $? -ne 0 ]; then echo "ERROR	: installation failed"; exit -1; fi
  echo "INSTALL	: npm install grunt-contrib-uglify"
  npm install grunt-contrib-uglify
  if [ $? -ne 0 ]; then echo "ERROR	: installation failed"; exit -1; fi
fi

if [ ! -e node_modules ]; then
  echo "INSTALL	: local NodeJS dependencies" 
  npm install
  if [ $? -ne 0 ]; then echo "ERROR	: installation failed"; exit -1; fi
fi
echo "STATUS	: local node_modules installed"


echo "GRUNT	: generating FireREST configuration files (see examples)"
grunt cfg-version:config/FireREST.json:examples/cfg-firepick1.json:$VERSION_MAJOR:$VERSION_MINOR:$VERSION_PATCH \
  cfg-custom:examples/cfg-firepick1.json:config/cv.json:config/cnc-firepick1.json 
grunt cfg-version:config/FireREST.json:examples/cfg-firepick-delta.json:$VERSION_MAJOR:$VERSION_MINOR:$VERSION_PATCH \
  cfg-custom:examples/cfg-firepick-delta.json:config/cv.json:config/cnc-firepick-delta.json 
grunt cfg-version:config/FireREST.json:examples/cfg-cnc-none.json:$VERSION_MAJOR:$VERSION_MINOR:$VERSION_PATCH \
  cfg-custom:examples/cfg-cnc-none.json:config/cv.json:config/cnc-none.json 

cp $FIREREST_CONFIG www/config.json

echo "CONFIG	: $FIREREST_CONFIG"
echo "SUDO	: SUDO_USER: $SUDO_USER"
echo "SSH	: SSH_AGENT_PID: $SSH_AGENT_PID"

fire/web -k

pull_git FireSight
pull_git FireFUSE

ps -eo uid,args | grep -E firerest.js | grep node > /dev/null
if [ $? -eq 0 ]; then
  echo "----------------------------------------"
  echo "ERROR	: FireREST is already running"
  echo "TRY	: Kill the existing FireREST process before proceeding with the build:"
  echo "PID	: `ps -e -o pid,command | grep -E "firerest.js" | grep -v grep`"
  exit -1
fi

if [ "$(type -p siege)" == "" ]; then
  echo "INSTALL	: siege"
  sudo apt-get install -y siege
  if [ $? -ne 0 ]; then echo "ERROR	: installation failed"; exit -1; fi
fi
echo "STATUS	: siege installed"

if [ $RASPBIAN -ne 1 ]; then
  echo "CONTENT	: FireREST reference implementation. Static content only"
  echo "SUCCESS	: Build complete"
else 
  echo "CONTENT	: Raspberry Pi FireFUSE with live content"
  if [ -e version-$VERSION_MAJOR.$VERSION_MINOR ] && [ -e /dev/firefuse/status ] ; then
    echo "STATUS	: FireREST dependencies OK"
  else
    build_git FireSight
    build_git FireFUSE
  fi
  fire/config -d
fi

rm -f version-$VERSION_MAJOR.$VERSION_MINOR
date > version-$VERSION_MAJOR.$VERSION_MINOR


echo "------------------------------------------"
echo "DATE	: `date`"
echo "SUCCESS	: ../FireREST/build complete"
echo "TEST	: Launch FireREST web service:"
echo "TEST	;   fire/web -s"
echo "TEST	; Verify FireREST web service at http://localhost:8080"
